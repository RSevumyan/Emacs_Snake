;;==============================================================================================================================================================
;;====================================================================Snake game================================================================================
;;==============================================================================================================================================================

(defun snake-game ()
  (interactive)
  (let ((-buf (generate-new-buffer-name "snake-game")))
    (switch-to-buffer -buf))
  (snake-mode)
  (setq boxsize (read-number "Input box size: " 40))
  (create-game-box boxsize)
  (start-snake-game)
  )

(defun start-snake-game()
  (setq direction 6)
  (create-snake)
  (print-snake)
  )

(defun create-game-box (boxsize)
  (let ((i 0))
    (while (< i boxsize)
      (setq i (+ i 1))
      (insert "\s_")
      )
  
    (newline)
    (setq i 0)
    (while (< i boxsize)
      (setq i (+ 1 i))
      (insert "|")
      (let ((j 0))
	(while (< j (- (* 2 boxsize) 1))
	  (setq j (+ j 1))
	  (insert "\s")
	  )
	)
      (insert "|")
      (newline)
      )
  
    (setq i 0)
    (while (< i boxsize)
      (setq i (+ i 1))
      (insert "\s")
      (insert-char 175)
      )
    )
  )

(defun create-snake()
  (let ((x (- boxsize 1)) (y (/ boxsize 2)))
    (setq snake-position (list (cons x y)))
    (setcdr (last snake-position) (list(cons (- x 2) y)))
    (setcdr (last snake-position) (list(cons (- x 4) y)))
    (setcdr (last snake-position) (list(cons (- x 6) y)))
    (setcdr (last snake-position) (list(cons (- x 8) y)))
    (setcdr (last snake-position) (list(cons (- x 10) y)))
    (setcdr (last snake-position) (list(cons (- x 12) y)))
    (setcdr (last snake-position) (list(cons (- x 14) y)))
    (setcdr (last snake-position) (list(cons (- x 16) y)))
    (setcdr (last snake-position) (list(cons (- x 18) y)))
    (setcdr (last snake-position) (list(cons (- x 20) y)))
    (setcdr (last snake-position) (list(cons (- x 22) y)))
    (setcdr (last snake-position) (list(cons (- x 24) y)))   
    )
  )

(defun move-snake(direction)
  (delete-snake)
  (let (newposition)
    (if (= direction 2)
	(setq newposition (cons (caar snake-position)  (+ (cdar snake-position) 1)))
      )
    (if (= direction 4)
	(setq newposition  (cons (- (caar snake-position) 2) (cdar snake-position)))
      )
    (if (= direction 6)
	(setq newposition  (cons (+ (caar snake-position) 2) (cdar snake-position)))
      )
    (if (= direction 8)
	(setq newposition  (cons  (caar snake-position)  (- (cdar snake-position) 1)))
      )
    (if (and (< (car newposition) (* boxsize 2)) (<= (cdr newposition) (+ boxsize 1)) (>= (car newposition) 1) (> (cdr newposition) 1))
	(progn
	  (add-to-list 'snake-position newposition)
	  (nbutlast snake-position 1)
	  (print-snake)
	  )
      (game-over)
      )
    )
  )

(defun print-snake()
  (dolist (pos snake-position)
    (goto-line (cdr pos))
    (move-to-column (car pos) )
    (delete-char 1)
    (insert "o")
    )  
 )

(defun delete-snake()
  (dolist (pos snake-position)
    (goto-line (cdr pos))
    (move-to-column (car pos) )
    (delete-char 1)
    (insert "\s")
    )  
  )

(defun snake-move-up()
  (interactive)
  (move-snake 8)
  )

(defun snake-move-down()
  (interactive)
  (move-snake 2)
  )

(defun snake-move-right()
  (interactive)
  (move-snake 6)
  )

(defun snake-move-left()
  (interactive)
  (move-snake 4)
  )

(defun eat(list)
  ;;ToDo
  (let ((x (caar (last snake)))(y (cdar (last snake))))
    
    )
  (setcdr (last list) (newlist(cons)))
  )

(defun game-over()
  (print-snake)
  (message "You died")
  )

(define-derived-mode snake-mode special-mode "snake"
  (setq inhibit-read-only t)
  (setq cursor-type nil)
  (setq line-spacing 0)
  (define-key snake-mode-map (kbd "<right>") 'snake-move-right)
  (define-key snake-mode-map (kbd "<left>") 'snake-move-left)
  (define-key snake-mode-map (kbd "<up>") 'snake-move-up)
  (define-key snake-mode-map (kbd "<down>") 'snake-move-down)
  )
